module square(rVals, gVals, bVals) {
	for(r = rVals) for(g = gVals) for(b = bVals) translate([r, g, b]) cube(1);
}
square([11], [0,3,5,6,7,8,9,10,11,12,13], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([0,1,2,5,8,13,14], [12], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([9], [0,3,4,5,6,7,8,9,10,11,12,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([10], [0,3,4,5,6,7,8,9,10,11,12,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([5], [0,1,2,3,4,5,6,7,8,9,10,11,13,14], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([0,1,2,3,6,7,8,9,10,11,12,13], [2], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([12], [0,1,3,4,5,6,7,8,9,10,11,12,13], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([1,6,7,11,12,13,15], [14], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([6], [0,3,4,5,6,7,8,9,10,11,12,13,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([0,6,7,9,10,11], [1], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([13], [0,1,3,4,5,6,7,8,9,10,11,13,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([8], [0,1,3,4,5,6,7,8,9,10,11,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([3], [0,1,3,4,5,6,7,8,9,10,11,12,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([0,1,11], [4], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([14], [0,1,2,3,4,5,6,7,8,9,10,11,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([2], [0,1,3,4,5,6,7,8,9,10,11,13,14], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([4], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([2,5,7,11,12,15], [15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
square([0], [0,3,5,6,7,8,9,10,11,13,14,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([7], [0,3,4,5,6,7,8,9,10,11,12,13], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);
square([0,1,2,4,6,7,9,10,11,12,14], [0,1,3,5,6,7,8,9,10,11,12,13], [14]);
square([1], [0,1,3,5,6,7,8,9,10,11,13,15], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]);